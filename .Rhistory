# Output: last state of the most likely path for the given observations
runViterbi=function(sequence, transmission, probs){
mostLikelyPosition <- 0
#length of the sequence
len <- length(sequence)
# The DP matrix has a row for each state and a column for each observation
dpMatrix <- matrix(0, nrow = 40, ncol = len)
# Only one obvervation
if (len == 1){
max <- 0
readings <- sequence[[1]]
for (i in 1:40){
prob = calculateEmissionProbability(readings, i, probs)
if (prob >= max){
max <- prob
mostLikelyPosition <- i
}
}
}
# Else run full viterbi
else {
# Calculate the first state
readings <- sequence[[1]]
for (i in 1:40){
prob = calculateEmissionProbability(readings, i, probs)
dpMatrix[1,1] <- prob
print(prob)
}
# Iterate over all observations
for (i in 2:len){
readings <- sequence[[i]]
# Iterate over all states
for (j in 1:40){
emProb <- calculateEmissionProbability(readings, j, probs)
# Find most likely transition from last states
maxTrans <- 0
for (s in 1:40){
probTrans <- transmission[s,j] * dpMatrix[s, i-1]
if (probTrans >= maxTrans){
maxTrans <- probTrans
}
}
# Fill dp matrix with maximizing probability
dpMatrix[j,i] <- (maxTrans * emProb)
}
}
}
print(dpMatrix)
# Return the most likely location of croc
positionLikelihood <- 0
for (i in 1:40){
if (dpMatrix[i,len] >= positionLikelihood) {
positionLikelihood <- dpMatrix[i, len]
mostLikelyPosition <- i
}
}
return (mostLikelyPosition)
}
runWheresCroc(makeMoves = hmmWC, showCroc = T)
numberOfStates <- 40
# The function to be passed to runWheresCroc()
# It uses an HMM model to guess the position of croc
# and an A*-algorithm to find the shortest path to it
hmmWC=function(moveInfo,readings,positions,edges,probs) {
# Make Transission probability matrix
transMat = matrix(0, nrow = numberOfStates, ncol = numberOfStates)
for (i in 1:numberOfStates){
options=getOptions(i, edges)
for (elem in options){
transMat[i, elem] <- 0.2
}
}
# Get the sequence from $mem
sequence <- moveInfo$mem
# Check if a tourist has been eaten
if (!identical(positions[1], NA) && positions[1] < 0){
currentPosition <- abs(positions[1])
# Set the readings to the exact mean values of the waterhole
readings[1] <- probs[[1]][currentPosition,1]
readings[2] <- probs[[2]][currentPosition,1]
readings[3] <- probs[[3]][currentPosition,1]
# Reset sequence
sequence <- list()
sequence[[1]] <- readings
} else {
# same for tourist 2
if (!identical(positions[2], NA) && positions[2] < 0){
currentPosition <- abs(positions[2])
readings[1] <- probs[[1]][currentPosition,1]
readings[2] <- probs[[2]][currentPosition,1]
readings[3] <- probs[[3]][currentPosition,1]
# Reset sequence
sequence <- list()
sequence[[1]] <- readings
}
}
# Add current readings
len <- length(sequence)
sequence[[len+1]] <- readings
# Calculate the most likely position of croc
crocsPosition <- runViterbi(sequence = sequence, transmission = transMat, probs = probs)
print("Crocs position: ")
print(crocsPosition)
# Randomly choose a move for
# TODO: IMPLEMENT PATHFINDING ALGORITHM
moveInfo$moves=c(sample(getOptions(positions[3],edges),1),0)
moveInfo$mem=sequence
return(moveInfo)
}
# Calculate the probability that a reading comes from
# certain waterhole given the mean and standard deviation (sd)
# of that waterhole
calculateReadingProbability=function(reading, mean, sd) {
# initialize probability with 0
prob <- 0
# location of crocodile known
if (reading == mean){
prob <- 1
} else {
# 1 sd interval --> 0.68
if (reading >= (mean - sd) && reading <= (mean + sd)){
prob <- 0.68
} else {
# 2 sd intervals --> 0.05
if (reading >= (mean - 2*sd) && reading <= (mean + 2*sd)){
prob <- 0.05
} else {
# more than 2 sd intervals --> 0.01
prob <- 0.01
#}
}
}
}
return(prob)
}
# Calculate the emission probability for a certain waterhole (wh)
# and the given values for salinity (sal), phosphate (phos) and nitrogen (nit)
# probs holds the matrices with the mean and standard deviations for each waterhole
calculateEmissionProbability=function(readings, wh, probs){
# Calculate single probabilites for each reading
salProb = calculateReadingProbability(readings[1], probs[[1]][wh,1], probs[[1]][wh,2])
phosProb = calculateReadingProbability(readings[2], probs[[2]][wh,1], probs[[2]][wh,2])
nitProb = calculateReadingProbability(readings[3], probs[[3]][wh,1], probs[[3]][wh,2])
# Return joint probability of these readings for wh
return (salProb * phosProb * nitProb)
}
# Run the viterbi algorithm
# Input: sequence of observations, transmission probability matrix
#        and the probability distribution for the waterholes
# Output: last state of the most likely path for the given observations
runViterbi=function(sequence, transmission, probs){
mostLikelyPosition <- 0
#length of the sequence
len <- length(sequence)
# The DP matrix has a row for each state and a column for each observation
dpMatrix <- matrix(0, nrow = 40, ncol = len)
# Only one obvervation
if (len == 1){
max <- 0
readings <- sequence[[1]]
for (i in 1:40){
prob = calculateEmissionProbability(readings, i, probs)
if (prob >= max){
max <- prob
mostLikelyPosition <- i
}
}
}
# Else run full viterbi
else {
# Calculate the first state
readings <- sequence[[1]]
for (i in 1:40){
prob = calculateEmissionProbability(readings, i, probs)
dpMatrix[1,1] <- prob
print(prob)
}
# Iterate over all observations
for (i in 2:len){
readings <- sequence[[i]]
# Iterate over all states
for (j in 1:40){
emProb <- calculateEmissionProbability(readings, j, probs)
# Find most likely transition from last states
maxTrans <- 0
for (s in 1:40){
probTrans <- transmission[s,j] * dpMatrix[s, i-1]
if (probTrans >= maxTrans){
maxTrans <- probTrans
}
}
# Fill dp matrix with maximizing probability
dpMatrix[j,i] <- (maxTrans * emProb)
}
}
}
print(dpMatrix)
# Return the most likely location of croc
positionLikelihood <- 0
for (i in 1:40){
if (dpMatrix[i,len] >= positionLikelihood) {
positionLikelihood <- dpMatrix[i, len]
mostLikelyPosition <- i
}
}
return (mostLikelyPosition)
}
runWheresCroc(makeMoves = hmmWC, showCroc = T)
runWheresCroc(makeMoves = hmmWC, showCroc = T)
runWheresCroc(makeMoves = hmmWC, showCroc = T)
numberOfStates <- 40
# The function to be passed to runWheresCroc()
# It uses an HMM model to guess the position of croc
# and an A*-algorithm to find the shortest path to it
hmmWC=function(moveInfo,readings,positions,edges,probs) {
# Make Transission probability matrix
transMat = matrix(0, nrow = numberOfStates, ncol = numberOfStates)
for (i in 1:numberOfStates){
options=getOptions(i, edges)
for (elem in options){
transMat[i, elem] <- 0.2
}
}
# Get the sequence from $mem
sequence <- moveInfo$mem
# Check if a tourist has been eaten
if (!identical(positions[1], NA) && positions[1] < 0){
currentPosition <- abs(positions[1])
# Set the readings to the exact mean values of the waterhole
readings[1] <- probs[[1]][currentPosition,1]
readings[2] <- probs[[2]][currentPosition,1]
readings[3] <- probs[[3]][currentPosition,1]
# Reset sequence
sequence <- list()
sequence[[1]] <- readings
} else {
# same for tourist 2
if (!identical(positions[2], NA) && positions[2] < 0){
currentPosition <- abs(positions[2])
readings[1] <- probs[[1]][currentPosition,1]
readings[2] <- probs[[2]][currentPosition,1]
readings[3] <- probs[[3]][currentPosition,1]
# Reset sequence
sequence <- list()
sequence[[1]] <- readings
}
}
# Add current readings
len <- length(sequence)
sequence[[len+1]] <- readings
# Calculate the most likely position of croc
crocsPosition <- runViterbi(sequence = sequence, transmission = transMat, probs = probs)
print("Crocs position: ")
print(crocsPosition)
# Randomly choose a move for
# TODO: IMPLEMENT PATHFINDING ALGORITHM
moveInfo$moves=c(sample(getOptions(positions[3],edges),1),0)
moveInfo$mem=sequence
return(moveInfo)
}
# Calculate the probability that a reading comes from
# certain waterhole given the mean and standard deviation (sd)
# of that waterhole
calculateReadingProbability=function(reading, mean, sd) {
# initialize probability with 0
prob <- 0
# location of crocodile known
if (reading == mean){
prob <- 1
} else {
# 1 sd interval --> 0.68
if (reading >= (mean - sd) && reading <= (mean + sd)){
prob <- 0.68
} else {
# 2 sd intervals --> 0.05
if (reading >= (mean - 2*sd) && reading <= (mean + 2*sd)){
prob <- 0.05
} else {
# more than 2 sd intervals --> 0.01
prob <- 0.01
#}
}
}
}
return(prob)
}
# Calculate the emission probability for a certain waterhole (wh)
# and the given values for salinity (sal), phosphate (phos) and nitrogen (nit)
# probs holds the matrices with the mean and standard deviations for each waterhole
calculateEmissionProbability=function(readings, wh, probs){
# Calculate single probabilites for each reading
salProb = calculateReadingProbability(readings[1], probs[[1]][wh,1], probs[[1]][wh,2])
phosProb = calculateReadingProbability(readings[2], probs[[2]][wh,1], probs[[2]][wh,2])
nitProb = calculateReadingProbability(readings[3], probs[[3]][wh,1], probs[[3]][wh,2])
# Return joint probability of these readings for wh
return (salProb * phosProb * nitProb)
}
# Run the viterbi algorithm
# Input: sequence of observations, transmission probability matrix
#        and the probability distribution for the waterholes
# Output: last state of the most likely path for the given observations
runViterbi=function(sequence, transmission, probs){
mostLikelyPosition <- 0
#length of the sequence
len <- length(sequence)
# The DP matrix has a row for each state and a column for each observation
dpMatrix <- matrix(0, nrow = 40, ncol = len)
# Only one obvervation
if (len == 1){
max <- 0
readings <- sequence[[1]]
for (i in 1:40){
prob = calculateEmissionProbability(readings, i, probs)
if (prob >= max){
max <- prob
mostLikelyPosition <- i
}
}
}
# Else run full viterbi
else {
# Calculate the first state
readings <- sequence[[1]]
for (i in 1:40){
prob = calculateEmissionProbability(readings, i, probs)
dpMatrix[1,1] <- prob
print(prob)
}
# Iterate over all observations
for (i in 2:len){
readings <- sequence[[i]]
# Iterate over all states
for (j in 1:40){
emProb <- calculateEmissionProbability(readings, j, probs)
# Find most likely transition from last states
maxTrans <- 0
for (s in 1:40){
probTrans <- transmission[s,j] * dpMatrix[s, i-1]
if (probTrans >= maxTrans){
maxTrans <- probTrans
}
}
# Fill dp matrix with maximizing probability
dpMatrix[j,i] <- (maxTrans * emProb)
}
}
}
print(dpMatrix)
# Return the most likely location of croc
positionLikelihood <- 0
for (i in 1:40){
if (dpMatrix[i,len] >= positionLikelihood) {
positionLikelihood <- dpMatrix[i, len]
mostLikelyPosition <- i
}
}
return (mostLikelyPosition)
}
runWheresCroc(makeMoves = hmmWC, showCroc = T)
numberOfStates <- 40
# The function to be passed to runWheresCroc()
# It uses an HMM model to guess the position of croc
# and an A*-algorithm to find the shortest path to it
hmmWC=function(moveInfo,readings,positions,edges,probs) {
# Make Transission probability matrix
transMat = matrix(0, nrow = numberOfStates, ncol = numberOfStates)
for (i in 1:numberOfStates){
options=getOptions(i, edges)
for (elem in options){
transMat[i, elem] <- 0.2
}
}
# Get the sequence from $mem
sequence <- moveInfo$mem
#   # Check if a tourist has been eaten
#   if (!identical(positions[1], NA) && positions[1] < 0){
#     currentPosition <- abs(positions[1])
#     # Set the readings to the exact mean values of the waterhole
#     readings[1] <- probs[[1]][currentPosition,1]
#     readings[2] <- probs[[2]][currentPosition,1]
#     readings[3] <- probs[[3]][currentPosition,1]
#
#     # Reset sequence
#     sequence <- list()
#     sequence[[1]] <- readings
#   } else {
#     # same for tourist 2
#     if (!identical(positions[2], NA) && positions[2] < 0){
#       currentPosition <- abs(positions[2])
#       readings[1] <- probs[[1]][currentPosition,1]
#       readings[2] <- probs[[2]][currentPosition,1]
#       readings[3] <- probs[[3]][currentPosition,1]
#
#       # Reset sequence
#       sequence <- list()
#       sequence[[1]] <- readings
#     }
#   }
# Add current readings
len <- length(sequence)
sequence[[len+1]] <- readings
# Calculate the most likely position of croc
crocsPosition <- runViterbi(sequence = sequence, transmission = transMat, probs = probs)
print("Crocs position: ")
print(crocsPosition)
# Randomly choose a move for
# TODO: IMPLEMENT PATHFINDING ALGORITHM
moveInfo$moves=c(sample(getOptions(positions[3],edges),1),0)
moveInfo$mem=sequence
return(moveInfo)
}
# Calculate the probability that a reading comes from
# certain waterhole given the mean and standard deviation (sd)
# of that waterhole
calculateReadingProbability=function(reading, mean, sd) {
# initialize probability with 0
prob <- 0
# location of crocodile known
if (reading == mean){
prob <- 1
} else {
# 1 sd interval --> 0.68
if (reading >= (mean - sd) && reading <= (mean + sd)){
prob <- 0.68
} else {
# 2 sd intervals --> 0.05
if (reading >= (mean - 2*sd) && reading <= (mean + 2*sd)){
prob <- 0.05
} else {
# more than 2 sd intervals --> 0.01
prob <- 0.01
#}
}
}
}
return(prob)
}
# Calculate the emission probability for a certain waterhole (wh)
# and the given values for salinity (sal), phosphate (phos) and nitrogen (nit)
# probs holds the matrices with the mean and standard deviations for each waterhole
calculateEmissionProbability=function(readings, wh, probs){
# Calculate single probabilites for each reading
salProb = calculateReadingProbability(readings[1], probs[[1]][wh,1], probs[[1]][wh,2])
phosProb = calculateReadingProbability(readings[2], probs[[2]][wh,1], probs[[2]][wh,2])
nitProb = calculateReadingProbability(readings[3], probs[[3]][wh,1], probs[[3]][wh,2])
# Return joint probability of these readings for wh
return (salProb * phosProb * nitProb)
}
# Run the viterbi algorithm
# Input: sequence of observations, transmission probability matrix
#        and the probability distribution for the waterholes
# Output: last state of the most likely path for the given observations
runViterbi=function(sequence, transmission, probs){
mostLikelyPosition <- 0
#length of the sequence
len <- length(sequence)
# The DP matrix has a row for each state and a column for each observation
dpMatrix <- matrix(0, nrow = 40, ncol = len)
# Only one obvervation
if (len == 1){
max <- 0
readings <- sequence[[1]]
for (i in 1:40){
prob = calculateEmissionProbability(readings, i, probs)
if (prob >= max){
max <- prob
mostLikelyPosition <- i
}
}
}
# Else run full viterbi
else {
# Calculate the first state
readings <- sequence[[1]]
for (i in 1:40){
prob = calculateEmissionProbability(readings, i, probs)
dpMatrix[1,1] <- prob
print(prob)
}
# Iterate over all observations
for (i in 2:len){
readings <- sequence[[i]]
# Iterate over all states
for (j in 1:40){
emProb <- calculateEmissionProbability(readings, j, probs)
# Find most likely transition from last states
maxTrans <- 0
for (s in 1:40){
probTrans <- transmission[s,j] * dpMatrix[s, i-1]
if (probTrans >= maxTrans){
maxTrans <- probTrans
}
}
# Fill dp matrix with maximizing probability
dpMatrix[j,i] <- (maxTrans * emProb)
}
}
}
print(dpMatrix)
# Return the most likely location of croc
positionLikelihood <- 0
for (i in 1:40){
if (dpMatrix[i,len] >= positionLikelihood) {
positionLikelihood <- dpMatrix[i, len]
mostLikelyPosition <- i
}
}
return (mostLikelyPosition)
}
runWheresCroc(makeMoves = hmmWC, showCroc = T)
runWheresCroc(makeMoves = hmmWC, showCroc = T)
runWheresCroc(makeMoves = hmmWC, showCroc = T)
